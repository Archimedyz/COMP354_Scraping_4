package Export;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

import Common.SharedVariables;
import Scraper.ScrapingEntry;

// external libs
import com.thoughtworks.xstream.XStream;

public class ClassConverter implements SharedVariables
{
	public void exportRDF(String path)
	{
		String rdf = "<?xml version=\"1.0\"?>\n<RDF>\n";
		
		for (int i = 0; i < scrapedEntries.size(); i++)
		{
			ScrapingEntry ent = scrapedEntries.get(i);
			
			rdf += ("<Description about=\"" + ent.name + "\">\n");
			rdf += ("<name>" + ent.name + "</name>\n");
			rdf += ("<author>" + ent.offeredBy + "</author>\n");
			rdf += ("<rating>" + ent.contentRating + "</rating>\n");
			rdf += ("<ratings>" + ent.numOfPeopleRated + "</ratings>\n");
			rdf += ("<upvotes>" + ent.numOfGoogleUpvotes + "</upvotes>\n");
			rdf += ("<category>" + ent.category + "</category>\n");
			rdf += ("<date>" + ent.dateLastUpdated + "</date>\n");
			rdf += ("<description>" + ent.description + "</description>\n");
			rdf += ("<installs>" + ent.numOfInstalls + "</installs>\n");
			rdf += ("<version>" + ent.currentVersion + "</version>\n");
			rdf += ("<size>" + ent.size + "</size>\n");
			rdf += ("<similar1>" + ent.similarApps.get(0) + "</similar1>\n");
			rdf += ("<similar2>" + ent.similarApps.get(1) + "</similar2>\n");
			rdf += ("<similar3>" + ent.similarApps.get(2) + "</similar3>\n");
			rdf += "</Description>\n";
		}
		
		rdf += "</RDF>";
		
		try
		{
			PrintWriter out = new PrintWriter(path);
			out.write(rdf);
			out.close();
		}
		catch (Exception e)
		{
			System.out.println("Error: Could not export data as rdf.");
		}
	}
	
	public static void exportXML(String xmlFileName) 
	{
		FileWriter encode = null;
		try {
			encode = new FileWriter(xmlFileName);
			XStream xstream = new XStream();
			String xml;
			 
			for (int i = 0; i < scrapedEntries.size(); ++i) {
				xml = xstream.toXML(scrapedEntries.get(i));
				encode.write(xml + "\n");
			}
			
			encode.close();
		} catch (IOException e) {
			System.out.println("IOException in ClassConverter!");
			e.printStackTrace();
		}
	}
	
	public static ArrayList<ScrapingEntry> readXML(String xmlFileName) {
		Scanner decoder = null;
		try {
			decoder = new Scanner(
					new BufferedReader(
							new FileReader(xmlFileName)
							)
					);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			System.out.println("ERROR: Could not read " + xmlFileNameWithoutExtension + ".xml, so exiting!");
			return null;
		}
		
		ArrayList<ScrapingEntry> xmlDatas = new ArrayList<ScrapingEntry>();
		
		XStream xstream = new XStream();
			
		int tagCounter = 0;
		String parsedLine = "";
		String parsedObject = "";
		while (decoder.hasNextLine()) {
			parsedLine = decoder.nextLine();
			
			if (parsedLine.contains("Scraper.ScrapingEntry")) {
				tagCounter++;
			}
			
			parsedObject += parsedLine;
			parsedLine = "";
			
			if (tagCounter >= 2) {
				tagCounter = 0;
				
				xmlDatas.add((ScrapingEntry)xstream.fromXML(parsedObject));
				
				parsedObject = "";
			}
		}
			
		decoder.close();
		
		xmlDatas.trimToSize();
		return xmlDatas;
	}
}
